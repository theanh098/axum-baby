//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::native_enum::MediaSource;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "media")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
  pub created_at: DateTime,
  #[sea_orm(column_type = "Text")]
  pub url: String,
  pub business_id: i32,
  #[sea_orm(column_type = "Text", nullable)]
  pub path: Option<String>,
  pub source: MediaSource,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::business::Entity",
    from = "Column::BusinessId",
    to = "super::business::Column::Id",
    on_update = "Cascade",
    on_delete = "Cascade"
  )]
  Business,
}

impl Related<super::business::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Business.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
