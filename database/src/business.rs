//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::native_enum::BusinessStatus;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "business")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
  pub created_at: DateTime,
  #[sea_orm(column_type = "Text")]
  pub name: String,
  #[sea_orm(column_type = "Text")]
  pub overview: String,
  #[sea_orm(column_type = "Text", nullable)]
  pub token: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub logo: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub founder_name: Option<String>,
  pub start_date: Option<DateTime>,
  #[sea_orm(column_type = "Text", nullable)]
  pub address: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub whitepaper_url: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub contract_address: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub website: Option<String>,
  pub types: Option<Vec<String>>,
  #[sea_orm(column_type = "Text")]
  pub main_category: String,
  pub chains: Option<Vec<String>>,
  pub cmc_id: Option<i32>,
  #[sea_orm(column_type = "Text", nullable)]
  pub contract_chain: Option<String>,
  pub status: BusinessStatus,
  pub tags: Option<Vec<String>>,
  pub creator_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::media::Entity")]
  Media,
  #[sea_orm(has_many = "super::notification::Entity")]
  Notification,
  #[sea_orm(has_many = "super::review::Entity")]
  Review,
  #[sea_orm(
    belongs_to = "super::super_user::Entity",
    from = "Column::CreatorId",
    to = "super::super_user::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  SuperUser,
}

impl Related<super::media::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Media.def()
  }
}

impl Related<super::notification::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Notification.def()
  }
}

impl Related<super::review::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Review.def()
  }
}

impl Related<super::super_user::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::SuperUser.def()
  }
}

impl Related<super::user::Entity> for Entity {
  fn to() -> RelationDef {
    super::follower_business::Relation::User.def()
  }
  fn via() -> Option<RelationDef> {
    Some(super::follower_business::Relation::Business.def().rev())
  }
}

impl ActiveModelBehavior for ActiveModel {}
