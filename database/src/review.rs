//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::native_enum::ReviewStatus;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "review")]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
  pub created_at: DateTime,
  pub rate: i32,
  pub business_id: i32,
  pub user_id: i32,
  pub status: ReviewStatus,
  pub likes: Option<Vec<i32>>,
  pub dislikes: Option<Vec<i32>>,
  #[sea_orm(column_type = "Text", nullable)]
  pub headline: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub comment: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub txn_hash: Option<String>,
  pub sharings: Option<Vec<i32>>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::activity::Entity")]
  Activity,
  #[sea_orm(
    belongs_to = "super::business::Entity",
    from = "Column::BusinessId",
    to = "super::business::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  Business,
  #[sea_orm(has_many = "super::criteria_review::Entity")]
  CriteriaReview,
  #[sea_orm(has_many = "super::notification::Entity")]
  Notification,
  #[sea_orm(has_many = "super::reply::Entity")]
  Reply,
  #[sea_orm(
    belongs_to = "super::user::Entity",
    from = "Column::UserId",
    to = "super::user::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  User,
}

impl Related<super::activity::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Activity.def()
  }
}

impl Related<super::business::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Business.def()
  }
}

impl Related<super::criteria_review::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::CriteriaReview.def()
  }
}

impl Related<super::notification::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Notification.def()
  }
}

impl Related<super::reply::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Reply.def()
  }
}

impl Related<super::user::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::User.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
