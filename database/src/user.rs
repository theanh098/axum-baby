//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub created_at: DateTime,
    #[sea_orm(column_type = "Text")]
    pub wallet_address: String,
    pub noti_accepted: bool,
    pub spam_accepted: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub email: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub nickname: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub avatar_url: Option<String>,
    pub is_admin: bool,
    #[sea_orm(column_type = "Text", nullable)]
    pub password: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub background_url: Option<String>,
    pub did_id: Option<i32>,
    pub last_sync_ibt: Option<DateTime>,
    pub last_update: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::activity::Entity")]
    Activity,
    #[sea_orm(
        belongs_to = "super::did::Entity",
        from = "Column::DidId",
        to = "super::did::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Did,
    #[sea_orm(has_many = "super::reply::Entity")]
    Reply,
    #[sea_orm(has_many = "super::review::Entity")]
    Review,
    #[sea_orm(has_many = "super::social::Entity")]
    Social,
}

impl Related<super::activity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Activity.def()
    }
}

impl Related<super::did::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Did.def()
    }
}

impl Related<super::reply::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reply.def()
    }
}

impl Related<super::review::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Review.def()
    }
}

impl Related<super::social::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Social.def()
    }
}

impl Related<super::business::Entity> for Entity {
    fn to() -> RelationDef {
        super::follower_business::Relation::Business.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::follower_business::Relation::User.def().rev())
    }
}

impl Related<super::campaign::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_campaign::Relation::Campaign.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_campaign::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
