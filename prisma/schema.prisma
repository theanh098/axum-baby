datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  id          Int          @id @default(autoincrement())
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  kind        ActivityKind
  user_id     Int
  review_id   Int?
  point       Int
  campaign_id Int?
  platform_id String?
  campaigns   Campaign?    @relation(fields: [campaign_id], references: [id])
  reviews     Review?      @relation(fields: [review_id], references: [id])
  user        User         @relation(fields: [user_id], references: [id])

  @@map("activity")
}

model Banner {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now()) @db.Timestamp(6)
  expried_time DateTime @db.Timestamp(6)
  source_id    Int
  storages     Storage  @relation(fields: [source_id], references: [id])

  @@map("banner")
}

model Business {
  id                  Int                @id @default(autoincrement())
  created_at          DateTime           @default(now()) @db.Timestamp(6)
  name                String             @unique
  overview            String
  token               String?
  logo                String?
  founder_name        String?
  start_date          DateTime?          @db.Timestamp(6)
  address             String?
  whitepaper_url      String?
  contract_address    String?
  website             String?
  types               String[]
  main_category       String
  chains              String[]
  cmc_id              Int?
  contract_chain      String?
  status              BusinessStatus     @default(pending)
  tags                String[]
  creator_id          Int
  super_users         SuperUser          @relation(fields: [creator_id], references: [id])
  medias              Media[]
  notifications       Notification[]
  reviews             Review[]
  follower_business_s FollowerBusiness[]

  @@index([cmc_id])
  @@index([cmc_id, token])
  @@index([main_category])
  @@index([main_category, types])
  @@index([token])
  @@index([types])
  @@map("business")
}

model Campaign {
  id              Int            @id @default(autoincrement())
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  title           String
  description     String
  metadata        String?
  activities      Activity[]
  user_campaign_s UserCampaign[]

  @@map("campaign")
}

model CriteriaReview {
  id        Int    @id @default(autoincrement())
  name      String
  value     Int
  review_id Int
  reviews   Review @relation(fields: [review_id], references: [id], onDelete: Cascade)

  @@map("criteria_review")
}

model Did {
  id         Int     @id @default(autoincrement())
  controller String  @unique
  email      String?
  username   String? @unique
  users      User[]

  @@map("did")
}

model Email {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  email      String   @unique

  @@map("email")
}

model FollowerBusiness {
  follower_id Int
  business_id Int
  businesses  Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [follower_id], references: [id])

  @@id([follower_id, business_id])
  @@map("follower_business")
}

model Media {
  id          Int         @id @default(autoincrement())
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  url         String
  business_id Int
  path        String?
  source      MediaSoucre
  businesses  Business    @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@map("media")
}

model Notification {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  business_id Int?
  review_id   Int?
  seen        Boolean   @default(false)
  to          Int
  from        Int?
  meta_data   String?
  type        String
  businesses  Business? @relation(fields: [business_id], references: [id])
  reviews     Review?   @relation(fields: [review_id], references: [id], onDelete: Cascade)
  from_user   User?     @relation("notification_from_user", fields: [from], references: [id])
  to_user     User      @relation("notification_to_user", fields: [to], references: [id])

  @@map("notification")
}

model Reply {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  desc       String
  review_id  Int
  likes      Int[]    @default([])
  dislikes   Int[]    @default([])
  user_id    Int
  review     Review   @relation(fields: [review_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id])

  @@map("reply")
}

model Review {
  id               Int              @id @default(autoincrement())
  created_at       DateTime         @default(now()) @db.Timestamp(6)
  rate             Int
  business_id      Int
  user_id          Int
  status           ReviewStatus     @default(pending)
  likes            Int[]            @default([])
  dislikes         Int[]            @default([])
  headline         String?
  comment          String?
  txn_hash         String?          @unique
  sharings         Int[]            @default([])
  activities       Activity[]
  criteria_reviews CriteriaReview[]
  notifications    Notification[]
  replies          Reply[]
  business         Business         @relation(fields: [business_id], references: [id])
  user             User             @relation(fields: [user_id], references: [id])

  @@map("review")
}

model SearchParam {
  id            Int    @id @default(autoincrement())
  business_name String @unique
  times         Int

  @@map("search_param")
}

model Social {
  id          Int       @id @default(autoincrement())
  last_update DateTime? @db.Timestamp(6)
  twitter_id  String?
  twitter     String?
  discord_id  String?
  discord     String?
  telegram_id String?
  telegram    String?
  user_id     Int       @unique
  user        User      @relation(fields: [user_id], references: [id])

  @@map("social")
}

model Storage {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  url        String
  tag        String?
  banners    Banner[]

  @@map("storage")
}

model SuperUser {
  id            Int           @id @default(autoincrement())
  role          SuperUserRole
  refresh_token String?
  username      String        @unique
  password      String
  avatar        String?
  businesses    Business[]

  @@map("super_user")
}

model User {
  id                  Int                @id @default(autoincrement())
  created_at          DateTime           @default(now()) @db.Timestamp(6)
  wallet_address      String             @unique
  noti_accepted       Boolean            @default(true)
  spam_accepted       Boolean            @default(true)
  email               String?
  nickname            String?
  avatar_url          String?
  is_admin            Boolean            @default(false)
  password            String?
  background_url      String?
  did_id              Int?
  last_sync_ibt       DateTime?          @db.Timestamp(6)
  last_update         DateTime?          @db.Timestamp(6)
  activities          Activity[]
  notifications       Notification[]     @relation("notification_to_user")
  rev_notifications   Notification[]     @relation("notification_from_user")
  replies             Reply[]
  reviews             Review[]
  socials             Social?
  did                 Did?               @relation(fields: [did_id], references: [id])
  user_campaign_s     UserCampaign[]
  follower_business_s FollowerBusiness[]

  @@map("user")
}

model UserCampaign {
  user_id     Int
  campaign_id Int
  claimed     Boolean  @default(false)
  amount      Int
  txn_hash    String?
  campaigns   Campaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id])

  @@id([user_id, campaign_id])
  @@map("user_campaign")
}

enum ActivityKind {
  reviewapproved
  reacthelpful
  reactdownful
  reply
  share
  join_discord
  join_telegram
  reward
}

enum BusinessStatus {
  approved
  pending
  rejected
}

enum MediaSoucre {
  Photo
  Telegram
  Discord
  Twitter
  Blog
}

enum ReviewStatus {
  approved
  pending
  rejected
}

enum SuperUserRole {
  admin
  editor
}
