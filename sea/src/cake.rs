//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "cake")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: Uuid,
  pub name: String,
  pub cooker_id: Uuid,
  pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::cooker::Entity",
    from = "Column::CookerId",
    to = "super::cooker::Column::Id",
    on_update = "Cascade",
    on_delete = "Cascade"
  )]
  Cooker,
  #[sea_orm(has_many = "super::fruit::Entity")]
  Fruit,
}

impl Related<super::cooker::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Cooker.def()
  }
}

impl Related<super::fruit::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Fruit.def()
  }
}

impl Related<super::filling::Entity> for Entity {
  fn to() -> RelationDef {
    super::cake_filling::Relation::Filling.def()
  }
  fn via() -> Option<RelationDef> {
    Some(super::cake_filling::Relation::Cake.def().rev())
  }
}

impl ActiveModelBehavior for ActiveModel {}
